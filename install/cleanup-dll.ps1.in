<#
.SYNOPSIS
    .
.PARAMETER Help
    Print help message and exit
.PARAMETER IgnoreRunningDynamicLibraryChecking
    Ignore running dynamic library checking.
.EXAMPLE
    .
    pwsh -File <this file> [options...]
    Get-Help <this file> -detailed
    Get-Help <this file> -full
#>

[CmdletBinding()]
param (
    [Parameter(ValueFromPipeline = $true,
        ValueFromPipelineByPropertyName = $true)]
    [switch]$Help,

    [Parameter(ValueFromPipeline = $true,
        ValueFromPipelineByPropertyName = $true)]
    [switch]$IgnoreRunningDynamicLibraryChecking = $false
)

$PSDefaultParameterValues['*:Encoding'] = 'UTF-8'

$OutputEncoding = [System.Text.UTF8Encoding]::new()

$SCRIPT_DIR = Split-Path -Parent $MyInvocation.MyCommand.Definition

Set-Location $SCRIPT_DIR

$DeployedShortSha = New-Object System.Collections.Generic.HashSet[string]

Get-ChildItem -Recurse -File "package-version.txt" | ForEach-Object {
    Get-Content $_ | Where-Object { $_ -match "vcs_short_sha" } | ForEach-Object { ($_ -split "\s+")[-1] }
} | ForEach-Object {
    $DeployedShortSha.Add($_) | Out-Null
}

function Cleanup-Library-Directory {
    param (
        [string] $LibraryDirectory
    )

    if (Test-Path $LibraryDirectory) {

        $DIR_PATHS = Get-ChildItem -Path $LibraryDirectory -Directory

        foreach ($DIR_PATH in $DIR_PATHS) {
            if ($DIR_PATH.Name -eq "@SERVER_FRAME_VCS_COMMIT_SHORT_SHA@") {
                continue
            }

            if ($DeployedShortSha.Contains($DIR_PATH.Name)) {
                continue
            }

            if ($DIR_PATH.Name -eq "runtime") {
                continue
            }

            if ($IsWindows) {
                Write-Output "Remove $DIR_PATH ..."
                Remove-Item -Recurse -Force -Path $DIR_PATH.FullName
                continue
            }

            if ($IgnoreRunningDynamicLibraryChecking) {
                $SO_PATHS = $false
            }
            else {
                $SO_PATHS = Get-ChildItem -Path $DIR_PATH.FullName -Filter "*.so*" -File
                foreach ($SO_PATH in $SO_PATHS) {
                    & lsof $SO_PATH.FullName 2>/dev/null
                    if ($LASTEXITCODE -ne 0) {
                        Write-Output "Remove $SO_PATH ..."
                        Remove-Item -Force -Path $SO_PATH.FullName
                    }
                }

                $SO_PATHS = Get-ChildItem -Path $DIR_PATH.FullName -Filter "*.so*" -File
            }

            if (-Not $SO_PATHS) {
                Write-Output "Remove $DIR_PATH ..."
                Remove-Item -Recurse -Force -Path $DIR_PATH.FullName
            }
        }

        $FILE_PATHS = Get-ChildItem -Path $LibraryDirectory -File
        foreach ($FILE_PATH in $FILE_PATHS) {
            Write-Output "Remove $FILE_PATH ..."
            Remove-Item -Recurse -Force -Path $FILE_PATH.FullName
        }
    }
}

Cleanup-Library-Directory lib ;
Cleanup-Library-Directory lib64 ;
