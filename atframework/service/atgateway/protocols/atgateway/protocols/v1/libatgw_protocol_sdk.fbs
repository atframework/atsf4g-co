// atgateway protocol schema file v1

namespace atframework.gw.v1;

enum error_code_t:int {
    EN_ECT_REFUSE_RECONNECT = -1005,
    EN_ECT_SESSION_EXPIRED = -1004,
    EN_ECT_BUSY = -1003,
    EN_ECT_HANDSHAKE = -1002,
    EN_ECT_FIRST_IDEL = -1001,
    EN_ECT_SUCCESS = 0,
}

enum handshake_step_t : ubyte {
    EN_HST_START_REQ = 0,           // Step 1. start a new session handshake by client
    EN_HST_START_RSP = 1,           // Step 2. tell client the session id, crypt method and bits, secret switch method and init data
    EN_HST_RECONNECT_REQ = 11,      // Step 1. start a reconnect handshake by client, with session id, crypt method and bits and the encrypted secret code
    EN_HST_RECONNECT_RSP = 12,      // Step 2. response reconnect handshake result to client
    EN_HST_DH_PUBKEY_REQ = 21,      // Step 3. DH: send public key of client to server
    EN_HST_DH_PUBKEY_RSP = 22,      // Step 4. DH: notify public key is accepted
    EN_HST_ECDH_PUBKEY_REQ = 31,    // Step 3. ECDH: send public key of client to server
    EN_HST_ECDH_PUBKEY_RSP = 32,    // Step 4. ECDH: notify public key is accepted
    EN_HST_VERIFY = 101,            // Step 5. validate the shared secret, send a encrypted public key to server
}

enum switch_secret_t : ubyte {
    EN_SST_DIRECT = 0,          // direct send secret codes (deprecated)
    EN_SST_DH = 1,              // use DH algorithm to swicth secrets
    EN_SST_ECDH = 2            // use ECDH algorithm to switch secrets
}

enum cs_msg_type_t : ubyte {
    EN_MTT_UNKNOWN = 0,
    EN_MTT_POST = 1,
    EN_MTT_HANDSHAKE = 2,
    EN_MTT_PING = 3,
    EN_MTT_PONG = 4,
    EN_MTT_KICKOFF = 5,
    EN_MTT_POST_KEY_SYN = 6,
    EN_MTT_POST_KEY_ACK = 7
}

table cs_msg_head {
    type: cs_msg_type_t(id: 0);
    sequence: ulong(id: 1);
}
union cs_msg_body { cs_body_post, cs_body_kickoff, cs_body_ping, cs_body_handshake }

table cs_body_post {
    /// the length before encrypt, because encrypt data will pad data.
    length: ulong;
    data: [byte];
}

table cs_body_kickoff {
    reason: int (id: 0);
}

///
/// crypt_param is used for different purpose depends on step and switch_type, that's
///     step=EN_HST_START_RSP, switch_type=EN_SST_DIRECT                        : nothing
///     step=EN_HST_START_RSP, switch_type=EN_SST_DH                            : DH Parameters: P,G,GX (GX means G^X and pub_key in openssl). KeyExchangeData as in SSL3
///     step=EN_HST_DH_PUBKEY_REQ|EN_HST_ECDH_PUBKEY_REQ, switch_type=EN_SST_DH : DH public key of client
///     step=EN_HST_DH_PUBKEY_RSP|EN_HST_ECDH_PUBKEY_RSP, switch_type=EN_SST_DH : verify data prefix
///     step=EN_HST_START_RSP, switch_type=EN_SST_DIRECT                        : secret
///     step=EN_HST_VERIFY, switch_type=ANY                                     : verify data prefix + suffix
table cs_body_handshake {
    session_id: ulong (id: 0);
    step: handshake_step_t (id: 1);
    switch_type: switch_secret_t (id: 2);
    crypt_type: string (id: 3);
    crypt_param: [byte] (id: 4);
    switch_param: [byte] (id: 5);
}

table cs_body_ping {
    /// the time when start ping
    timepoint: long (id: 0);
}

/// message
table cs_msg {
    head: cs_msg_head (id: 0);
    body: cs_msg_body (id: 2);
}

root_type cs_msg;

file_identifier "ATGW";
file_extension "atgw";
